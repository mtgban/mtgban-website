import { UploadEntry, OptimizedUploadEntry } from "./upload";
import { NewspaperPage, Heading } from "./news";
import { EditionEntry } from "./product";
import { NavElem } from "./nav";
import { SearchEntry, FilterOpt } from "./search";
import { GenericCard } from "./card";
import { Arbitrage } from "./arbit";
import { Dataset } from "./chart";

interface Embed {
    OEmbedURL: string;
    PageURL: string;
    Title: string;
    Contents: string;
    ImageURL: string;
    ImageCropURL: string;
    Description: string;
    RetailPrice: number;
    BuylistPrice: number;
}

interface PageVars {
    Pagination: any;
    Nav: NavElem[];
    ExtraNav: NavElem[];
    ShowLogin: boolean;
    Hash: string;
    Embed: Embed;
    Title: string;
    ErrorMessage: string;
    WarningMessage: string;
    InfoMessage: string;
    LastUpdate: string;
    AllKeys: string[];
    SearchQuery: string;
    SearchBest: boolean;
    SearchSort: string;
    CondKeys: string[];
    FoundSellers: Record<string, Record<string, SearchEntry[]>>;
    FoundVendors: Record<string, Record<string, SearchEntry[]>>;
    Metadata: Record<string, GenericCard>;
    PromoTags: string[];
    NoSort: boolean;
    HasAvailable: boolean;
    CardBackURL: string;
    ShowUpsell: boolean;
    CanShowAll: boolean;
    CleanSearchQuery: string;
    ScraperShort: string;
    HasAffiliate: boolean;
    CanDownloadCSV: boolean;
    ShowSYP: boolean;
    Arb: Arbitrage[];
    ArbitOptKeys: string[];
    ArbitOptConfig: Record<string, FilterOpt>;
    ArbitFilters: Record<string, boolean>;
    ArbitOptTests: Record<string, boolean>;
    SortOption: string;
    GlobalMode: boolean;
    ReverseMode: boolean;
    Page: string;
    Subtitle: string;
    ToC: NewspaperPage[];
    Headings: Heading[];
    Cards: GenericCard[];
    Table: string[][];
    HasReserved: boolean;
    HasStocks: boolean;
    HasSypList: boolean;
    IsOneDay: boolean;
    CanSwitchDay: boolean;
    SortDir: string;
    LargeTable: boolean;
    OffsetCards: number;
    FilterSet: string;
    Editions: string[];
    FilterRarity: string;
    Rarities: string[];
    CardHashes: string[];
    EditionsMap: Record<string, EditionEntry>;
    PageMessage: string;
    PageType: string;
    CanFilterByPrice: boolean;
    FilterMinPrice: number;
    FilterMaxPrice: number;
    CanFilterByPercentage: boolean;
    FilterMinPercChange: number;
    FilterMaxPercChange: number;
    Sleepers: Record<string, string[]>;
    SleepersKeys: string[];
    SleepersColors: string[];
    Headers: string[];
    OtherHeaders: string[];
    OtherTable: string[][];
    CurrentTime: Date;
    Uptime: string;
    DiskStatus: string;
    MemoryStatus: string;
    LatestHash: string;
    Tiers: string[];
    DemoKey: string;
    SelectableField: boolean;
    DisableLinks: boolean;
    DisableChart: boolean;
    AxisLabels: string[];
    Datasets: Dataset[];
    ChartID: string;
    Alternative: string;
    StocksURL: string;
    AltEtchedId: string;
    EditionSort: string[];
    EditionList: Record<string, EditionEntry[]>;
    IsSealed: boolean;
    IsSets: boolean;
    TotalSets: number;
    TotalCards: number;
    TotalUnique: number;
    ScraperKeys: string[];
    IndexKeys: string[];
    SellerKeys: string[];
    VendorKeys: string[];
    UploadEntries: UploadEntry[];
    IsBuylist: boolean;
    TotalEntries: Record<string, number>;
    EnabledSellers: string[];
    EnabledVendors: string[];
    CanBuylist: boolean;
    CanChangeStores: boolean;
    RemoteLinkURL: string;
    TotalQuantity: number;
    Optimized: Record<string, OptimizedUploadEntry[]>;
    OptimizedTotals: Record<string, number>;
    HighestTotal: number;
    MissingCounts: Record<string, number>;
    MissingPrices: Record<string, number>;
    ResultPrices: Record<string, Record<string, number>>;
    IsLoggedIn: boolean;
    UserEmail: string;
    UserRole: string;
    UserTier: string;
    IsImpersonating: boolean;
    ImpersonationTarget: string;
}

export type { PageVars };